generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  passwordHash         String?
  image                String?
  profileComplete      Boolean   @default(false)
  role                 Role      @default(MEMBER)
  boostsAvailable      Int       @default(0)
  isPremium            Boolean   @default(false)
  premiumUntil         DateTime?
  boostsUsed           Int       @default(0)
  canceledAt           DateTime? @db.Timestamp(6)
  stripeSubscriptionId String?
  stripeCustomerId     String?

  // Dating Preferences
  preferredGenders String? @default("male,female") // "male", "female", or "male,female"
  preferredAgeMin  Int?    @default(18)
  preferredAgeMax  Int?    @default(100)

  member              Member?
  Transaction         Transaction[]
  accounts            Account[]
  hasSeenMembersIntro Boolean           @default(false)
  viewedProfiles      ProfileView[]     @relation("ViewerProfileViews")
  profileViewers      ProfileView[]     @relation("ViewedProfileViews")
  SmartMatchCache     SmartMatchCache[]
}

model Interest {
  id       String  @id @default(cuid())
  memberId String
  name     String
  icon     String
  category String?
  member   Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Member {
  id           String    @id @default(cuid())
  userId       String    @unique
  name         String
  dateOfBirth  DateTime
  gender       String
  created      DateTime  @default(now())
  updated      DateTime  @default(now())
  description  String
  city         String
  country      String
  image        String?
  boostedUntil DateTime?

  // Location fields
  latitude          Float? // GPS coordinates
  longitude         Float?
  locationUpdatedAt DateTime? // When location was last updated
  locationEnabled   Boolean   @default(false) // User opted in for location
  maxDistance       Int?      @default(50) // Max distance preference in KM

  sourceLikes        Like[]            @relation("source")
  targetLikes        Like[]            @relation("target")
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  Message            Message[]
  recipientMessages  Message[]         @relation("recipient")
  senderMessages     Message[]         @relation("sender")
  photos             Photo[]
  videos             Video[]
  interests          Interest[]
  interactions       UserInteraction[] @relation("userInteractions")
  targetInteractions UserInteraction[] @relation("targetInteractions")
  preference         UserPreference?
  videoUrl           String?           @db.Text
  videoUploadedAt    DateTime?
}

model UserProfileAnalysis {
  userId    String   @id
  content   String
  insights  String?  @db.Text
  updatedAt DateTime @updatedAt
}

model Photo {
  id         String    @id @default(cuid())
  url        String
  publicId   String?   @unique
  isApproved Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  member   Member? @relation(fields: [memberId], references: [id])
  memberId String?
}

model Like {
  sourceUserId String
  targetUserId String
  sourceMember Member @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)
  targetMember Member @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])
}

model Message {
  id               String    @id @default(cuid())
  text             String
  created          DateTime  @default(now())
  senderId         String?
  recipientId      String?
  memberId         String?
  dateRead         DateTime?
  senderDeleted    Boolean   @default(false)
  recipientDeleted Boolean   @default(false)
  isStarred        Boolean   @default(false)
  isArchived       Boolean   @default(false)
  Member           Member?   @relation(fields: [memberId], references: [id])
  recipient        Member?   @relation("recipient", fields: [recipientId], references: [userId])
  sender           Member?   @relation("sender", fields: [senderId], references: [userId])
}

model Token {
  id      String    @id @default(cuid())
  email   String
  token   String
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

model Transaction {
  id      String   @id
  userId  String
  amount  Float
  planId  String
  status  String
  created DateTime @default(now())
  updated DateTime
  months  Int      @default(1)
  boosts  Int      @default(0)
  User    User     @relation(fields: [userId], references: [id])
}

model UserInteraction {
  id        String   @id @default(cuid())
  userId    String
  targetId  String
  action    String
  duration  Int?
  timestamp DateTime @default(now())
  weight    Float    @default(1.0)
  user      Member   @relation("userInteractions", fields: [userId], references: [userId], onDelete: Cascade)
  target    Member   @relation("targetInteractions", fields: [targetId], references: [userId], onDelete: Cascade)
}

model UserPreference {
  id             String   @id @default(cuid())
  userId         String   @unique
  preferenceData Json
  lastUpdated    DateTime @default(now())
  user           Member   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Video {
  id         String   @id @default(cuid())
  url        String
  memberId   String
  isApproved Boolean  @default(false)
  duration   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  member     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model ProfileView {
  id       String   @id @default(cuid())
  viewerId String
  viewedId String
  viewedAt DateTime @default(now())
  seen     Boolean  @default(false)

  viewer User @relation("ViewerProfileViews", fields: [viewerId], references: [id])
  viewed User @relation("ViewedProfileViews", fields: [viewedId], references: [id])

  @@unique([viewerId, viewedId])
  @@index([viewedId])
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}

model SmartMatchCache {
  id        String   @id @default(cuid())
  userId    String
  matchData String   @db.Text // JSON string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("smart_match_cache")
}

enum Role {
  ADMIN
  MEMBER
}
